#ifndef INPUT_H
#define INPUT_H

#include <array>
#include <vector>
#include <string>

/* definition to expand macro then apply to pragma message */
#define VALUE_TO_STRING(x) #x
#define VALUE(x) VALUE_TO_STRING(x)
#define VAR_NAME_VALUE(var) #var "="  VALUE(var)

/* Some example here */
//#pragma message(VAR_NAME_VALUE(NPROCS))

namespace lbm {

  enum class SolverMethod {BGK, ELBM, Approached_ELBM, ForcedNR_ELBM, ForcedBNR_ELBM, error};

  enum class InitDensityType{homogeneous, peak, error};
  enum class InitVelocityType{homogeneous, perturbated, wave, decay, error};

  enum class ForcingMethod {GUO, SC, EDM, error};
  enum class ForceType {constant, sinusoidal, turbulent, energy_removal, turbulent_time, wavenumbers_time, error};

  enum class BoundaryType {bounceBack_halfWay, pressure_ZouHe, velocity_ZouHe, entropic, corner, error};
  enum class BoundaryPosition {top, bottom, left, right, top_left, top_right, bottom_right, bottom_left, error};
  enum class CornerPosition {top_left, top_right, bottom_right, bottom_left, error};

  enum class OutputType {vtr, backup, total_energy, total_enstrophy, mach_number, reynolds_number, overall_energy_balance, energy_balance_time_derivative, energy_balance_pressure_gradient, energy_balance_dissipation, energy_balance_energy_input, nu_eff_kenergy, nu_eff_alpha, error};

  constexpr int lengthX_g = ${lengthX_g};
  constexpr int lengthY_g = ${lengthY_g};
  constexpr int length_g = lengthX_g;
  constexpr int size_g = lengthX_g * lengthY_g;

  constexpr int lengthX_l = lengthX_g/NPROCS;
  constexpr int lengthY_l = lengthY_g;
  constexpr int size_l = lengthX_l * lengthY_l;
  constexpr int size_buf = lengthY_l * 3;
  constexpr int haloX = 1;
  constexpr int haloY = 1;

  constexpr int startIteration = ${startIteration};
  constexpr int iterationMax = ${iterationMax};
  constexpr int writeStep = ${writeStep};
  constexpr int backupStep = ${backupStep};
  constexpr auto prefix = "${prefix}";

  constexpr double tau = ${tau};
  constexpr double beta = 1.0/(2.0*tau);
  constexpr SolverMethod solverMethod = SolverMethod::${solverMethod};

  constexpr InitDensityType initDensityType = InitDensityType::${initDensityType};
  constexpr double initDensityValue = ${initDensityValue};
  constexpr InitVelocityType initVelocityType = InitVelocityType::${initVelocityType};
  constexpr double initVelocityXValue = ${initVelocityXValue};
  constexpr double initVelocityYValue = ${initVelocityYValue};

  constexpr int numberForces = ${numberForces};
  constexpr ForcingMethod forcingMethod = ForcingMethod::${forcingMethod};
  constexpr std::array<ForceType, numberForces> forceTypeArray = { $forceTypeArray };
  constexpr std::array<double, numberForces> forceAmplitudeXArray = { $forceAmplitudeXArray };
  constexpr std::array<double, numberForces> forceAmplitudeYArray = { $forceAmplitudeYArray };
  constexpr std::array<double, numberForces> forceWaveLengthXArray = { $forceWaveLengthXArray };
  constexpr std::array<double, numberForces> forceWaveLengthYArray = { $forceWaveLengthYArray };
  constexpr int numberWavenumberPairs = ${forceNumberWavenumberPairs};
  constexpr std::array<std::array<int, numberWavenumberPairs>, numberForces> forcekXArray = { $forcekXArray };
  constexpr std::array<std::array<int, numberWavenumberPairs>, numberForces> forcekYArray = { $forcekYArray };
  constexpr double lengthScale = ${lengthScale};

  constexpr std::array<double, numberForces> forcePeriodTimeArray = { $forcePeriodTimeArray };

  constexpr int numberBCs = ${numberBCs};
  constexpr std::array<BoundaryType, numberBCs> boundaryTypeArray = { $boundaryTypeArray };
  constexpr std::array<BoundaryPosition, numberBCs> boundaryPositionArray = { $boundaryPositionArray };
  constexpr std::array<int, numberBCs> boundaryStartArray = { $boundaryStartArray };
  constexpr std::array<int, numberBCs> boundaryEndArray = { $boundaryEndArray };
  constexpr std::array<double, numberBCs> boundaryPressureArray = { $boundaryPressureArray };
  constexpr std::array<double, numberBCs> boundaryVelocityXArray = { $boundaryVelocityXArray };
  constexpr std::array<double, numberBCs> boundaryVelocityYArray = { $boundaryVelocityYArray };

  constexpr int numberOutputs = ${numberOutputs};
  constexpr std::array<OutputType, numberOutputs> outputTypeArray = { $outputTypeArray };

  constexpr bool writeNextDensity = ${writeNextDensity};
  constexpr bool writePreviousDensity = ${writePreviousDensity};
  constexpr bool writePrevious2Density = ${writePrevious2Density};
  constexpr bool writeNextVelocity = ${writeNextVelocity};
  constexpr bool writePreviousVelocity = ${writePreviousVelocity};
  constexpr bool writePrevious2Velocity = ${writePrevious2Velocity};
  constexpr bool writeNextVorticity = ${writeNextVorticity};
  constexpr bool writeNextForce = ${writeNextForce};
  constexpr bool writePreviousVorticity = ${writePreviousVorticity};
  constexpr bool writeNextAlpha = ${writeNextAlpha};
  constexpr bool writeNextEntropy = ${writeNextEntropy};
  constexpr bool writePreviousEntropy = ${writePreviousEntropy};

}

#endif // INPUT_H
