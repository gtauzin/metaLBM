#include "analysis.h"

#include "input.h"
#include "commons.h"
#include "lattice.h"

namespace lbm {


  vector<double, CACHE_LINE> calculateVorticityField(const vector<double, CACHE_LINE>& velocityFieldX,
                                                     const vector<double, CACHE_LINE>& velocityFieldY) {
    vector<double, CACHE_LINE> vorticityFieldR(size_g);
    for(int iY = 0; iY < lengthY_g; iY++) {
      for(int iX = 0; iX < lengthX_g; iX++) {
        int idx = idx_gF(iX, iY);
        vorticityFieldR[idx] = calculateVorticity(velocityFieldX, velocityFieldY, iX, iY);
      }
    }
    return vorticityFieldR;
  }

  vector<double, CACHE_LINE> calculateLocalEntropyField(const Lattice& l) {
    vector<double, CACHE_LINE> localEntropyFieldR(size_g);

    for(int iX = haloX; iX < haloX+lengthX_g; iX++) {
      for(int iY = haloY; iY < haloY+lengthY_g; iY++) {
        int idx_F = idx_inF(iX, iY);
        localEntropyFieldR[idx_F] = calculateEntropy(l, iX, iY);
      }
    }
    return localEntropyFieldR;
  }


    vector<double, CACHE_LINE> calculateEntropyField(const vector<double, CACHE_LINE>& distribution) {
    vector<double, CACHE_LINE> entropyFieldR(size_g);

      for(int iX = 0; iX < lengthX_g; iX++) {
        for(int iY = 0; iY < lengthY_g; iY++) {
          int idx = idx_gF(iX, iY);
          entropyFieldR[idx] = calculateEntropy(distribution, iX, iY);
        }
      }
      return entropyFieldR;
  }



}
