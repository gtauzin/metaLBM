#pragma once

#include <string>

#include "metaLBM/Commons.h"
#include "metaLBM/Options.h"
#include "metaLBM/MathVector.h"

namespace lbm {
  using dataT = double;
  using Vector = MathVector<dataT, 3>;

  constexpr int numProcs = NPROCS;
  constexpr int numThreads = NTHREADS;

  constexpr LatticeType latticeT = LatticeType::D2Q21;
  constexpr int globalLengthX = GLOBAL_LENGTH_X;
  constexpr int globalLengthY = GLOBAL_LENGTH_Y;
  constexpr int globalLengthZ = GLOBAL_LENGTH_Z;

  constexpr unsigned int startIteration = 0;
  constexpr unsigned int endIteration = 1000000;
  constexpr unsigned int writeStep = 2000;
  constexpr unsigned int backUpStep = 10000;

  constexpr unsigned int scalarAnalysisStep = 200;
  constexpr unsigned int spectralAnalysisStep = 2000;
  constexpr unsigned int performanceAnalysisStep = 5000;
  constexpr unsigned int successiveWriteStep = 3;

  constexpr AlgorithmType algorithmT = AlgorithmType::Pull;
  constexpr PartitionningType partitionningT = PartitionningType::OneD;
  constexpr Implementation implementationT = Implementation::MPI;
  constexpr MemoryLayout memoryL = MemoryLayout::SoA;
  constexpr Overlapping overlappingT = Overlapping::Off;

  constexpr dataT relaxationTime = 0.501767767; //0.505; //0.500003535534; //0.501767767; //0.5001047566; //0.500003535534; // 0.5005237828; // //0.505; //0.5000054433;// 0.5027216553;// 0.50001;
  constexpr CollisionType collisionT = CollisionType::ForcedNR_ELBM; //ForcedNR_ELBM_Forcing; //  // // //
  constexpr EquilibriumType equilibriumT = EquilibriumType::TruncationMa3;

  constexpr InitDensityType initDensityT = InitDensityType::Homogeneous;
  constexpr dataT initDensityValue = 1.0;
  constexpr InitVelocityType initVelocityT = InitVelocityType::Homogeneous;
  constexpr Vector initVelocityVector = { {0.0, 0.0, 0.0} };

  constexpr ForcingSchemeType forcingSchemeT = ForcingSchemeType::ExactDifferenceMethod;
  constexpr ForceType forceT = ForceType::Turbulent2D;

  constexpr dataT factor = 0.5; // 1.; // 0.5; //0.2222222222; //1.;
  constexpr Vector forceAmplitude = { {factor*5e-4, factor*5e-4, factor*5e-4} };
  constexpr Vector forceWaveLength = { {32.0, 32.0, 32.0} };
  constexpr int forcekMin = 5;
  constexpr int forcekMax = 7;

  constexpr Vector removalForceAmplitude = { {factor*1.e-6, factor*1.e-6, factor*1.e-6} };
  constexpr Vector removalForceWaveLength = { {32.0, 32.0, 32.0} };
  constexpr int removalForcekMin = 1;
  constexpr int removalForcekMax = 2;

  constexpr BoundaryType boundaryT = BoundaryType::Generic;

  constexpr InputOutputFormat inputOutputFormatT = InputOutputFormat::ascii;
  constexpr auto prefix = LBM_POSTFIX;

  constexpr bool writeFieldInit = 1;
  constexpr bool writeAnalysisInit = 0;

  constexpr bool writeForce = 1;
  constexpr bool writeEntropy = 0;
  constexpr bool writeAlpha = 1;
  constexpr bool writeT = 1;
  constexpr bool writeVorticity = 1;

  constexpr bool analyzeTotalEnergy = 1;
  constexpr bool analyzeTotalEnstrophy = 1;

  constexpr bool analyzeEnergySpectra = 1;
  constexpr bool analyzeEnstrophySpectra = 1;
}
